@model List<Application.DTOs.CustomerDto>

@{
    ViewData["Title"] = "Customers";
}

<div id="container-customers" class="container mt-4">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-tags me-2"></i>
                    Customers
                    @if (Model?.Count > 0)
                    {
                        <span class="badge bg-primary ms-2">@Model.Count</span>
                    }
                </h2>
            </div>

            <!-- Customers Table -->
            @if (Model == null || !Model.Any())
            {
                <!-- Empty State -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body text-center py-5">
                                <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No Customers Found</h4>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Customers Table Card -->
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h5 class="mb-0">All Customers</h5>
                            </div>
                            <div class="col-md-6">
                                <!-- Search Box -->
                                <div class="input-group input-group-sm">
                                    <input type="text" 
                                           class="form-control" 
                                           id="searchInput" 
                                           placeholder="Search customers...">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="customersTable">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col" class="sortable" data-column="name">
                                        <i class="fas fa-tag me-2"></i>User Name
                                        <i class="fas fa-sort ms-1 sort-icon"></i>
                                    </th>
                                    <th scope="col" class="sortable" data-column="fullname">
                                        <i class="fas fa-align-left me-2"></i>Full Name
                                        <i class="fas fa-sort ms-1 sort-icon"></i>
                                    </th>
                                    <th scope="col" class="text-center" width="150">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in Model)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <strong>@customer.UserName</strong>
                                                    @* @if (customer.IsActive == false)
                                                    {
                                                        <span class="badge bg-warning text-dark ms-2">Inactive</span>
                                                    } *@
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="fullname-text">@customer.FullName</span>
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group" role="group">
                                                <button type="button" 
                                                        class="btn btn-sm btn-outline-danger delete-btn" 
                                                        data-customer-id="@customer.Id"
                                                        data-customer-username="@customer.UserName"
                                                        title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Table Footer with Pagination Info -->
                    <div class="card-footer bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                Showing @Model.Count customers
                            </small>
                            <div>
                                <!-- Pagination controls would go here if needed -->
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Click column headers to sort
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteCustomerModal" tabindex="-1" aria-labelledby="deleteCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteCustomerModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Delete Customer
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the customer <strong id="customerNameToDelete"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-warning me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-2"></i>Delete Customer
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            let customerToDelete = null;
            
            // Search functionality
            $('#searchInput').on('keyup', function() {
                const searchTerm = $(this).val().toLowerCase();
                
                $('#customersTable tbody tr').each(function() {
                    const customerName = $(this).find('td:first-child strong').text().toLowerCase();
                    const customerFullName = $(this).find('.fullname-text').text().toLowerCase();
                    
                    if (customerName.includes(searchTerm) || customerFullName.includes(searchTerm)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
                
                // Update results count
                const visibleRows = $('#customersTable tbody tr:visible').length;
                $('.card-footer small:first-child').text(`Showing ${visibleRows} customers`);
            });
            
            // Table sorting
            $('.sortable').click(function() {
                const column = $(this).data('column');
                const $table = $('#customersTable');
                const $tbody = $table.find('tbody');
                const $rows = $tbody.find('tr').toArray();
                
                // Determine sort direction
                const isAscending = !$(this).hasClass('sort-asc');
                
                // Remove sort classes from all headers
                $('.sortable').removeClass('sort-asc sort-desc');
                $('.sort-icon').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                
                // Add sort class to current header
                $(this).addClass(isAscending ? 'sort-asc' : 'sort-desc');
                $(this).find('.sort-icon').removeClass('fa-sort')
                    .addClass(isAscending ? 'fa-sort-up' : 'fa-sort-down');
                
                // Sort rows
                $rows.sort(function(a, b) {
                    let aValue, bValue;
                    
                    if (column === 'name') {
                        aValue = $(a).find('td:first-child strong').text().trim();
                        bValue = $(b).find('td:first-child strong').text().trim();
                    } else if (column === 'fullname') {
                        aValue = $(a).find('.fullname-text').text().trim();
                        bValue = $(b).find('.fullname-text').text().trim();
                    }
                    
                    if (aValue < bValue) return isAscending ? -1 : 1;
                    if (aValue > bValue) return isAscending ? 1 : -1;
                    return 0;
                });
                
                // Append sorted rows
                $.each($rows, function(index, row) {
                    $tbody.append(row);
                });
            });
            
            // Delete customer handler
            $('.delete-btn').click(function() {
                customerToDelete = $(this).data('customer-id');
                const customerName = $(this).data('customer-username');
                
                $('#customerNameToDelete').text(customerName);
                $('#deleteCustomerModal').modal('show');
            });
            
            // Confirm delete
            $('#confirmDeleteBtn').click(function() {
                $('#deleteCustomerModal').modal('hide');
                if (customerToDelete) {
                    deleteCustomer(customerToDelete);
                }
            });
            
            // AJAX delete function
            function deleteCustomer(customerId) {
                $.ajax({
                    url: '@Url.Action("Delete", "Customers")',
                    type: 'POST',
                    data: {
                        id: customerId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Remove row from table
                            $(`.delete-btn[data-customer-id="${customerId}"]`).closest('tr').fadeOut(300, function() {
                                $(this).remove();
                                updateCustomerCount();
                            });
                            
                            showAlert('Customer deleted successfully', 'success');
                        } else {
                            showAlert('Error deleting customer: ' + response.message, 'danger');
                        }
                    },
                    error: function() {
                        showAlert('Error deleting customer. Please try again.', 'danger');
                    }
                });
            }
            
            function updateCustomerCount() {
                const count = $('#customersTable tbody tr').length;
                $('.badge').text(count);
                $('.card-footer small:first-child').text(`Showing ${count} customers`);
                
                // Show empty state if no customers left
                if (count === 0) {
                    location.reload();
                }
            }
            
            function showAlert(message, type) {
                const alert = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;
                $('#container-customers').prepend(alert);

                // Auto-dismiss after 3 seconds
                setTimeout(function() {
                    $('.alert').fadeOut();
                }, 3000);
            }
        });
    </script>
}

@section Styles {
    <style>
        .customer-image, .customer-placeholder {
            flex-shrink: 0;
        }
        
        .fullname-text {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            max-width: 300px;
        }
        
        .sortable {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable:hover {
            background-color: #f8f9fa;
        }
        
        .sort-icon {
            opacity: 0.5;
            transition: all 0.2s ease;
        }
        
        .sortable:hover .sort-icon,
        .sort-asc .sort-icon,
        .sort-desc .sort-icon {
            opacity: 1;
        }
        
        .table > :not(caption) > * > * {
            padding: 0.75rem;
        }
        
        .btn-group .btn {
            margin-right: 0;
        }
        
        @@media (max-width: 768px) {
            .card-header .row > div {
                margin-bottom: 1rem;
            }
            
            .btn-group {
                flex-direction: column;
            }
            
            .btn-group .btn {
                margin-bottom: 0.25rem;
                border-radius: 0.375rem !important;
            }
        }
        
        .table-responsive {
            border-radius: 0;
        }
        
        .empty-state i {
            opacity: 0.3;
        }
    </style>
}